// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String
  role         Role
  jurisdiction String?
  barNumber    String?
  emailVerif   Boolean  @default(false)
  accountVerif Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  cases          Case[]       @relation("ClientCases")
  lawyerCases    Case[]       @relation("LawyerCases")
  quotes         Quote[]      @relation("LawyerQuotes")
  clientPayments Payment[]    @relation("ClientPayment")
  lawyerPayments Payment[]    @relation("LawyerPayment")
  notifications  Notification[]
}

model Case {
  id          String     @id @default(cuid())
  title       String
  category    String
  description String
  status      CaseStatus @default(OPEN)
  clientId    String
  lawyerId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  client  User     @relation("ClientCases", fields: [clientId], references: [id])
  lawyer  User?    @relation("LawyerCases", fields: [lawyerId], references: [id])
  files   File[]
  quotes  Quote[]
  payment Payment?
}

model File {
  id           String   @id @default(cuid())
  caseId       String
  storagePath  String
  originalName String
  mimeType     String
  size         Int
  createdAt    DateTime @default(now())

  // Relations
  case Case @relation(fields: [caseId], references: [id])
}

model Quote {
  id           String      @id @default(cuid())
  lawyerId     String
  caseId       String
  amount       Decimal
  expectedDays Int
  note         String?
  status       QuoteStatus @default(PROPOSED)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  lawyer  User     @relation("LawyerQuotes", fields: [lawyerId], references: [id])
  case    Case     @relation(fields: [caseId], references: [id])
  payment Payment?
}

model Payment {
  id              String        @id @default(cuid())
  caseId          String        @unique
  quoteId         String        @unique
  clientId        String
  lawyerId        String
  amount          Decimal
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  stripeSessionId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  client User  @relation("ClientPayment", fields: [clientId], references: [id])
  lawyer User  @relation("LawyerPayment", fields: [lawyerId], references: [id])
  case   Case  @relation(fields: [caseId], references: [id])
  quote  Quote @relation(fields: [quoteId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}

enum Role {
  CLIENT
  LAWYER
}

enum CaseStatus {
  OPEN
  ENGAGED
  CLOSED
  CANCELLED
}

enum QuoteStatus {
  PROPOSED
  ACCEPTED
  REJECTED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum NotificationType {
  QUOTE 
  CASE 
  PAYMENT
}